<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1471592738093">{:repl-history {:ide [], :local [&quot;(def a main1)&quot; &quot;(def a main)&quot; &quot;(promise? a)&quot; &quot;(def a '(1 2 3))&quot; &quot;(map println a)&quot; &quot;(map #(%) a)&quot; &quot;(map #((+ 1 %)) a)&quot; &quot;(map #(+ 1 %) a)&quot; &quot;(def b (map #(+ 1 %) a))&quot; &quot;b&quot; &quot;(def a (take 10 (iterate 1)))&quot; &quot;(def a (take 10 iterate 1))&quot; &quot;(def a (take 10 (iterate inc 1)))&quot; &quot;(type a (main1))&quot; &quot;(def a (main1))&quot; &quot;(def a (take 100 (iterate inc 1)))&quot; &quot;(def b (map inc a))&quot; &quot;(def b (get-body))&quot; &quot;(type b)&quot; &quot;(take 10 @b)&quot; &quot;(def a(main2))&quot; &quot;(def a ())&quot; &quot;(def a (main2))&quot; &quot;(main2 println)&quot; &quot;(def a (main2 proc))&quot; &quot;(type a)&quot; &quot;(first a)&quot; &quot;(take 2 a)&quot; &quot;(def a (http/get http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options))&quot; &quot;(def a (http/get \&quot;http://www.baidu.com\&quot;))&quot; &quot;(def a (http/get \&quot;http://www.baidu.com\&quot;) options)&quot; &quot;(def a (http/get \&quot;http://www.baidu.com\&quot; options))&quot; &quot;(def a (http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options))&quot; &quot;a&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys body}] (proc get-body)))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys body}] (println get-body)))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body]}] (proc get-body)))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body]}] (print get-body)))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body status]}] ((println body) (println status))))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body status]}] (do (println body) (println status))))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body status]}] (do (proc body) (println status))))&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; options (fn [{:keys [body status]}] (do (process body) (println status))))&quot; &quot;(defn callback [{:keys [status headers body error opts]}]\n  ;; opts contains :url :method :header + user defined key(s)\n  (let [{:keys [method start-time url]} opts]\n    (println method  url \&quot;status\&quot; status \&quot;takes time\&quot;\n             (- (System/currentTimeMillis) start-time) \&quot;ms\&quot;)))\n\n;;; save state for callback, useful for async request\n(let [opts {:start-time (System/currentTimeMillis)}]\n  (http/get \&quot;http://http-kit.org\&quot; opts callback))&quot; &quot;(defn callback [{:keys [status headers body error opts]}]\n  ;; opts contains :url :method :header + user defined key(s)\n  (let [{:keys [method body start-time url]} opts]\n    (println method  url \&quot;status\&quot; status \&quot;takes time\&quot; body\n             (- (System/currentTimeMillis) start-time) \&quot;ms\&quot;)))\n\n;;; save state for callback, useful for async request\n(let [opts {:start-time (System/currentTimeMillis)}]\n  (http/get \&quot;http://http-kit.org\&quot; opts callback))&quot; &quot;(main1)&quot; &quot;(http/get \&quot;http://huaban.com/favorite/beauty/?is07k6hx&amp;max=824270409&amp;limit=20&amp;wfl=1\&quot; {:as :text} options\n          (fn [{:keys [status body error]}]\n            (if error\n              (println \&quot;Failed\&quot;)\n              (println body))))&quot; &quot;\n(def a main1)&quot; &quot;(proc main2)&quot; &quot;(def a (main3))&quot; &quot;(take 20 a)&quot; &quot;(main2 str2json)&quot; &quot;(main2 proc)&quot; &quot;(def info (main2 str2json))&quot; &quot;(take 20 info)&quot; &quot;(take 1 info)&quot; &quot;(second (second info))&quot; &quot;(map println (second (second info)))&quot; &quot;(map (fn [a] (let [k (:key (:file a))] ({:url (str k)}))) (second (second info)))&quot; &quot;(map (fn [a] (let [k  (:pin_id a)] ({:url (str k)}))) (second (second info)))&quot; &quot;(map println (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:seq a)] (println k))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:pin_id a)] (println k))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:file a)] (println k))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:key (:file a))] (println k))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:key (:file a)) n (:pin_id a)] (println k a))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:key (:file a)) n (:pin_id a)] (println k n))) (take 1 (second (second info))))&quot; &quot;(map (fn [a] (let [k (:key (:file a)) n (:pin_id a)] (println k n))) (take 10 (second (second info))))&quot; &quot;(def tt (map (fn [a] (let [k (:key (:file a)) n (:pin_id a)] (println k n))) (take 10 (second (second info)))))&quot; &quot;(def tt (map (fn [a] (let [k (:key (:file a)) n (:pin_id a)] ({:k k :n n}))) (take 10 (second (second info)))))&quot; &quot;tt&quot; &quot;(println tt)&quot; &quot;(main)&quot;], :remote []}}</component>
</project>